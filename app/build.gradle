plugins {
    id 'com.android.application'
    id "de.undercouch.download" version "4.1.2"
    id "org.openapi.generator" version "5.1.1"
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    def versionPropsFile = file('version.properties')

    def versionMajor = 2
    def versionMinor = 1
    def versionPatch = 4

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1

        versionProps.store(versionPropsFile.newWriter(), null)

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                if (buildType.name == "release") {
                    outputFileName = "barcode.apk"
                }
            }
        }

        defaultConfig {
            applicationId "com.miguel_lm.app_barcode"
            minSdkVersion 24
            targetSdkVersion 31
            versionCode versionBuild
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

            flavorDimensions "version"
            productFlavors {
                flavor1 {
                    dimension "version"
                    manifestPlaceholders = [appTheme: "@style/Theme.AppCompat.NoActionBar.SplashRojo"]
                }
                flavor2 {
                    dimension "version"
                    manifestPlaceholders = [appTheme: "@style/Theme.AppCompat.NoActionBar.SplashBlack"]
                }
            }
        }

    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    task ejecutarDespliegue(type: JavaExec) {
        classpath = files("../scripts/despliegue.jar")
        args "${versionMajor}.${versionMinor}.${versionPatch}", project.getRootDir().absolutePath + File.separator + "app" + File.separator + "release" + File.separator + "barcode.apk"
    }

    afterEvaluate {
        assembleRelease.doLast {
            tasks.ejecutarDespliegue.exec()
        }
    }
    buildTypes {
        release {
            buildConfigField "java.lang.Long", "BUILD_DATE", "" + System.currentTimeMillis() +"L"
            buildConfigField "java.lang.String", "IP", "\"185.253.152.70\""  //93.189.91.236
            buildConfigField "java.lang.String", "PORT", "\"8080\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "java.lang.Long", "BUILD_DATE", "" + System.currentTimeMillis() + "L"
            buildConfigField "java.lang.String", "IP", "\"185.253.152.70\"" //10.0.2.2
            buildConfigField "java.lang.String", "PORT", "\"8080\""
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task downloadApiSpec {
    try {
        download {
            src 'http://localhost:8080/v3/api-docs'
            dest new File(buildDir, "swagger.json")
            quiet true
        }
    } catch (Exception ignored) {
        logger.warn("Local server not available, downloading from remote...")
        download {
            src 'http://185.253.152.70:8080/v3/api-docs'
            dest new File(buildDir, "swagger.json")
            quiet true
            onlyIfModified true
        }
    }
}

openApiGenerate {
    generatorName = "java"
    inputSpec = "$buildDir/swagger.json".toString()
    outputDir = "$projectDir/.generated-client".toString()
    library = "retrofit2"
    groupId = "com.almacen"
    invokerPackage = "com.almacen.api.client"
    modelPackage = "com.almacen.api.client.model"
    id = "api-client"
    packageName = "com.almacen.api.client"
    version = "1.0.0-SNAPSHOT"
    skipOverwrite = false
    generateModelTests = false
    generateApiTests = false
    configOptions = [
        serializableModel  : "true",
        useRuntimeException: "true"
    ]
}

task publishSampleClientToMavenLocal(type: Exec) {
    workingDir "$projectDir/.generated-client"
    commandLine "cmd","/c","mvn","-DskipTests","-Dmaven.javadoc.skip=true","clean", "install"
}

tasks.build.dependsOn tasks.openApiGenerate
tasks.openApiGenerate.dependsOn tasks.downloadApiSpec
tasks.openApiGenerate.finalizedBy tasks.publishSampleClientToMavenLocal

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.airbnb.android:lottie:4.1.0'
    //noinspection GradleCompatible
    implementation 'com.android.support:cardview-v7:28.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.2.0'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'com.wdullaer:materialdatetimepicker:4.2.3'
    implementation 'me.relex:circleindicator:2.1.6'
    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'commons-codec:commons-codec:1.15'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation ('com.almacen:api-client:1.0.0-SNAPSHOT') {
        exclude group:'org.apache.oltu.oauth2' , module: 'org.apache.oltu.oauth2.common'
    }
}